#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.11 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 64 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 148 0 211 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
0 11 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 11 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 738 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 186
(
 #"#reader(lib \"htdp-beginner-abbr-reader.ss\" \"lang\")((modname |#co"
 #"ncurso|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#"
 #"t constructor repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 17 3 37 #"; Ejercicio 13 - Pr\303\241ctica 5, parte 1"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"#|Dise\303\261e una funci\303\263n cortas que tome una lista de stri"
 #"ngs y devuelva una"
) 0 0 17 29 1 #"\n"
0 0 17 3 54 #"lista con aquellas _palabras_ de longitud menor a 5.|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 5 #"Antes"
0 0 24 3 1 #" "
0 0 14 3 2 #"de"
0 0 24 3 1 #" "
0 0 14 3 8 #"empezar:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"todos"
0 0 24 3 1 #" "
0 0 14 3 3 #"los"
0 0 24 3 1 #" "
0 0 14 3 9 #"elementos"
0 0 24 3 1 #" "
0 0 14 3 3 #"son"
0 0 24 3 1 #" "
0 0 14 3 9 #"palabras?"
0 0 24 29 1 #"\n"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 2 #"si"
0 0 24 3 1 #" "
0 0 14 3 3 #"hay"
0 0 24 3 1 #" "
0 0 14 3 9 #"elementos"
0 0 24 3 1 #" "
0 0 14 3 3 #"que"
0 0 24 3 1 #" "
0 0 14 3 9 #"contienen"
0 0 24 3 1 #" "
0 0 14 3 4 #"m\303\241s"
0 0 24 3 1 #" "
0 0 14 3 2 #"de"
0 0 24 3 1 #" "
0 0 14 3 3 #"una"
0 0 24 3 1 #" "
0 0 14 3 8 #"palabra:"
0 0 24 29 1 #"\n"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"debo"
0 0 24 3 1 #" "
0 0 14 3 7 #"agregar"
0 0 24 3 1 #" "
0 0 14 3 2 #"la"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 1 #" "
0 0 14 3 2 #"en"
0 0 24 3 1 #" "
0 0 14 3 3 #"s\303\255"
0 0 24 3 1 #" "
0 0 14 3 2 #"si"
0 0 24 3 1 #" "
0 0 14 3 4 #"esta"
0 0 24 3 1 #" "
0 0 14 3 5 #"tiene"
0 0 24 3 1 #" "
0 0 14 3 8 #"longitud"
0 0 24 3 1 #" "
0 0 14 3 5 #"menor"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 2 #"5?"
0 0 24 29 1 #"\n"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"debo"
0 0 24 3 1 #" "
0 0 14 3 7 #"agregar"
0 0 24 3 1 #" "
0 0 14 3 3 #"las"
0 0 24 3 1 #" "
0 0 14 3 8 #"palabras"
0 0 24 3 1 #" "
0 0 14 3 6 #"dentro"
0 0 24 3 1 #" "
0 0 14 3 2 #"de"
0 0 24 3 1 #" "
0 0 14 3 2 #"la"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 1 #" "
0 0 14 3 2 #"si"
0 0 24 3 1 #" "
0 0 14 3 5 #"estas"
0 0 24 3 1 #" "
0 0 14 3 6 #"tienen"
0 0 24 3 1 #" "
0 0 14 3 8 #"longitud"
0 0 24 3 1 #" "
0 0 14 3 5 #"menor"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 2 #"5?"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"ahora"
0 0 24 3 1 #" "
0 0 14 3 5 #"vemos"
0 0 24 29 1 #"\n"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 2 #"no"
0 0 24 3 1 #" "
0 0 14 3 4 #"debo"
0 0 24 3 1 #" "
0 0 14 3 7 #"agregar"
0 0 24 3 1 #" "
0 0 14 3 4 #"nada"
0 0 24 3 1 #" "
0 0 14 3 2 #"de"
0 0 24 3 1 #" "
0 0 14 3 3 #"una"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 1 #" "
0 0 14 3 3 #"con"
0 0 24 3 1 #" "
0 0 14 3 3 #"mas"
0 0 24 3 1 #" "
0 0 14 3 2 #"de"
0 0 24 3 1 #" "
0 0 14 3 3 #"una"
0 0 24 3 1 #" "
0 0 14 3 8 #"palabra?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 1 #"|"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 6 #"Bueno,"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 42 #"Primero empezamos con el dise\303\261o de datos."
0 0 17 29 1 #"\n"
0 0 17 3 42 #" Vamos a representar palabras con strings."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"; Representamos palabras con strings"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"Luego pasamos a la signatura."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"; cortas: List(String) -> List(String)"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 60
#"Como nos indica el enunciado, tomamos una lista de strings y"
0 0 17 29 1 #"\n"
0 0 17 3 87
(
 #"devolvemos otra lista de palabras que como dijimos antes son represe"
 #"ntadas por strings."
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 96
(
 #"Despues pasamos a la declaraci\303\263n de prop\303\263sito, que res"
 #"ulta bastante parecida al enunciado. Leo"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 113
(
 #"; dada una lista de strings devuelve una lista con aquellos elemento"
 #"s de la lista original con longitud menor a 5"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 113
(
 #"Ahora, antes de la definici\303\263n de la funci\303\263n, tenemos q"
 #"ue pensar algunos ejemplos que despu\303\251s ser\303\241n ejecutado"
 #"s"
) 0 0 17 29 1 #"\n"
0 0 17 3 75
(
 #"con la funci\303\263n check-expect para ver si nuestra funci\303\263"
 #"n hace lo esperado."
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 97
(
 #"Primero, siempre que trabajamos"
 #" con listas est\303\241 bueno ver qu\303\251 debe suceder con la lis"
 #"ta vac\303\255a."
) 0 0 17 29 1 #"\n"
0 0 17 3 99
(
 #"Es claro que la lista vac\303\255a no tiene palabras menores a 5 pq "
 #"no tiene palabras entonces escribimos"
) 0 0 17 29 1 #"\n"
0 0 17 3 30 #"(check-expect (corta '()) '())"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 98
(
 #"Despu\303\251s podemos ver que sucede con una lista cuyos elementos "
 #"sean solamente palabras menores a 5,"
) 0 0 17 29 1 #"\n"
0 0 17 3 89
(
 #"en este caso, la funci\303\263n me debe devolver la misma lista que "
 #"tom\303\263 como entrada es decir"
) 0 0 17 29 1 #"\n"
0 0 17 3 89
(
 #"(check-expect (corta (list \"hola\" \"qu\303\251\" \"tal\" \"todo\")"
 #") (list \"hola\" \"qu\303\251\" \"tal \"todo\"))"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 112
(
 #"Tambi\303\251n tiene sentido ver que sucede en el caso de que la lis"
 #"ta no tenga ninguna string con longitud menor a 5."
) 0 0 17 29 1 #"\n"
0 0 17 3 75
(
 #"Ac\303\241 la funci\303\263n nos tiene que devolver la lista vac\303"
 #"\255a entonces escribimos"
) 0 0 17 29 1 #"\n"
0 0 17 3 61
#"(check-expect (corta (list \"todas\" \"palabras\" \"largas\")) '())"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 120
(
 #"Y, por \303\272ltimo claro, deber\303\255amos verificar un caso dond"
 #"e haya tanto palabras con longitud menor a 5 como tambien mayor."
) 0 0 17 29 1 #"\n"
0 0 17 3 26 #"Por ejemplo, podemos hacer"
0 0 17 29 1 #"\n"
0 0 17 3 87
(
 #"(check-expect (corta (list \""
 #"mezclamos\" \"y\" \"vemos\" \"qu\303\251\" \"sucede\")) (list \"y\" "
 #"\"qu\303\251\"))"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 111
(
 #"Entonces, hechos estos pasos previos, podemos ahora s\303\255 pasar "
 #"a la definici\303\263n de la funci\303\263n propiamente dicha"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 54
#"C\303\263mo podr\303\255amos pensar el funcionamiento de la misma?"
0 0 17 29 1 #"\n"
0 0 17 3 126
(
 #"En definitiva lo que tenemos qu\303\251 hacer es a partir de nuestra"
 #" lista pasada como argumento,  ver cuales de todos sus elementos"
) 0 0 17 29 1 #"\n"
0 0 17 3 54
#"cumplen la condici\303\263n de tener una longitud menor a 5."
0 0 17 29 1 #"\n"
0 0 17 3 125
(
 #"Pensandolo as\303\255, lo que podemos hacer es de alguna manera ir r"
 #"ecorriendo la lista y fij\303\241ndonos elemento por elemento cu\303"
 #"\241les"
) 0 0 17 29 1 #"\n"
0 0 17 3 70
(
 #"son los que cumplen con la condici\303\263n e ir agreg\303\241ndolos"
 #" a otra lista."
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 43 #"Pero bueno, \302\277c\303\263mo hacemos esto en Racket?"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 85
(
 #"Sabemos que tenemos acceso al primer elemento de la lista mediante l"
 #"a funci\303\263n first."
) 0 0 17 29 1 #"\n"
0 0 17 3 49 #" Pero, c\303\263mo accedemos al resto de los elementos?"
0 0 17 29 1 #"\n"
0 0 17 3 122
(
 #"Adem\303\241s de first para las listas en Racket contamos con la fun"
 #"ci\303\263n rest que nos devuelve la lista sin su primer elemento,"
) 0 0 17 29 1 #"\n"
0 0 17 3 9 #"entonces,"
0 0 17 29 1 #"\n"
0 0 17 3 105
(
 #"una manera de acceder al segundo elemento es aplicando first sobre e"
 #"l resultado de hacer rest de la lista"
) 0 0 17 29 1 #"\n"
0 0 17 3 107
(
 #"una manera de acceder al tercer elemento es aplicando first sobre el"
 #" resultado de hacer rest a el resultado"
) 0 0 17 29 1 #"\n"
0 0 17 3 39 #"de haber hecho rest a la lista original"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"y as\303\255 sucesivamente"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 93
(
 #"asi podemos ir accediendo a cada uno de los elementos y comprobar si"
 #" cumplen con la condicion"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 83
(
 #"pero, la pregumta ahora es \302\277como vamos a ir guardando esos el"
 #"ementos en una lista?"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"un abordaje logico puede ser:"
0 0 17 29 1 #"\n"
0 0 17 3 104
(
 #"una vez que tengo un elemento que cumple la condicion hago uso del c"
 #"onstructor cons para agregarlo a una"
) 0 0 17 29 1 #"\n"
0 0 17 3 103
(
 #"lista formada por todos los elementos que cumplan la condici\303\263"
 #"n que vengan despu\303\251s de \303\251l en la lista."
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 126
(
 #"Por lo que dijimos antes s\303\251 como ir accediendo al segundo ele"
 #"mento de la lista y luego al tercero cuarto etc -> mediante rest"
) 0 0 17 29 1 #"\n"
0 0 17 3 117
(
 #"y casualmente una funci\303\263n que me permite encontrar los string"
 #"s cuya longitud sea menor a 5 en el rest de la lista es"
) 0 0 17 29 1 #"\n"
0 0 17 3 113
(
 #"la misma funci\303\263n que estamos definiendo (esto pq rest nos dev"
 #"uelve una lista). Vamos a usar recursi\303\263n es decir,"
) 0 0 17 29 1 #"\n"
0 0 17 3 39 #"la funci\303\263n se va a llamar a s\303\255 misma."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 83
(
 #"Entonces, ah\303\255 estar\303\255amos bastante cerca de terminar de"
 #" definir nuestra funci\303\263n: "
) 0 0 17 29 1 #"\n"
0 0 17 3 23 #"lo que vamos a hacer es"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"// escribir "
0 0 17 29 1 #"\n"
0 0 17 3 53
#"chequeamos si el primer elemento cumple la condici\303\263n"
0 0 17 29 1 #"\n"
0 0 17 3 59
#"si lo hace vamos a hacer (cons (first l) (cortas (rest l)))"
0 0 17 29 1 #"\n"
0 0 17 3 50 #"-bueno aca suponemos que nuestra lista se llama l-"
0 0 17 29 1 #"\n"
0 0 17 3 113
(
 #"si no la cumple simplemente queremos ver si las strings que siguen l"
 #"a cumplen, o sea vamos a simplemente devolver"
) 0 0 17 29 1 #"\n"
0 0 17 3 33 #"si no la cumple (cortas (rest l))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"Pero bueno ac\303\241 nos falta algo, "
0 0 17 29 1 #"\n"
0 0 17 3 129
(
 #"pensemos si nuestra funci\303\263n fuese as\303\255 y la llamo con u"
 #"na lista de 2  hola y chau llamo a la funcion cumple con la condicio"
 #"n asi"
) 0 0 17 29 1 #"\n"
0 0 17 3 128
(
 #"que hace cons... se llama cortas con rest de l y tambien hacemos con"
 #"s... pero luego rest de l es una lista vacia y cuando llamem"
) 0 0 17 29 1 #"\n"
0 0 17 3 83
(
 #"a la funcion con la lista vac\303\255a al querer hacer first esto re"
 #"sultar\303\241 en un error."
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 130
(
 #"no solo que ya estar\303\255a ma"
 #"l que la funci\303\263n no est\303\251 "
 #"definida para la lista vac\303\255a (pues es una entrada que nos pue"
 #"den pasar) sino"
) 0 0 17 29 1 #"\n"
0 0 17 3 81
(
 #"que tambien hay q tener en cuenta q la recursion siempre necesita de"
 #" un caso base"
) 0 0 17 29 1 #"\n"
0 0 17 3 28 #"en este caso, la lista vacia"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 98
(
 #"entonces a lo que ya ten\303\255amos escrito le vamos a agregar lo q"
 #"ue sucede si tenemos una lista vacia"
) 0 0 17 29 1 #"\n"
0 0 17 3 46 #"si la lista es vacia devolvemos la lista vacia"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"si no lo es"
0 0 17 29 1 #"\n"
0 0 17 3 13 #"chequeamos..."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 40 #"Ahora solo queda escribir esto en Racket"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"(define"
0 0 17 29 1 #"\n"
0 0 17 3 10 #"(cortas l)"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"(cond [(empty? l) '()]"
0 0 17 29 1 #"\n"
0 0 17 3 17 #"      [(cons? l)]"
0 0 17 29 1 #"\n"
0 0 17 3 121
(
 #"      si aca tenemos un else para ver si nos pasaron algo disntinto "
 #"a una lista usariamos el cons? pero como en este caso"
) 0 0 17 29 1 #"\n"
0 0 17 3 121
(
 #"en el tipado o signatura declaramos que esta funcion solo recibira l"
 #"istas de strings no existira otra posibilidad asi que"
) 0 0 17 29 1 #"\n"
0 0 17 3 22 #"escribimos simplemente"
0 0 17 29 1 #"\n"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"(define"
0 0 17 29 1 #"\n"
0 0 17 3 10 #"(cortas l)"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"(cond [(empty? l) '()]"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"      [if (long-menor-a-5 (first l))"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"           (cons (first l) (cortas l))"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"           (cortas l)])"
0 0 17 29 1 #"\n"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 70
(
 #"y bueno queda como \303\272ltimo detalle definir la funcion con la c"
 #"ondicion"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"Si quieren podemos poner en el dise\303\261o de datos"
0 0 17 29 1 #"\n"
0 0 17 3 35 #";Representamos palabras con strings"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"La signatura quedar\303\255a"
0 0 17 29 1 #"\n"
0 0 17 3 31 #";long-menor-a-5: String -> Bool"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"Y el prop\303\263sito de la funci\303\263n"
0 0 17 29 1 #"\n"
0 0 17 3 84
(
 #"; devuelve true si la palabra tiene una longitud menor a 5 y false e"
 #"n caso contrario"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"Ponemos unos check-expect"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"de algo que sepamos que nos de true"
0 0 17 29 1 #"\n"
0 0 17 3 41 #"(check-expect (long-menor-a-5 \"hola\") #t)"
0 0 17 29 1 #"\n"
0 0 17 3 42 #"de algo que sepamos que nos va a dar false"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"(check-expect (long-menor-a-5 \"palabra\") #f)"
0 0 17 29 1 #"\n"
0 0 17 3 49 #"y de algo interesante por ejemplo la string vacia"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"su longitud es 0 por lo tanto nos va a dar true"
0 0 17 29 1 #"\n"
0 0 17 3 37 #"(check-expect (long-menor-a-5 \"\") #t)"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"y definimos"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"(define"
0 0 17 29 1 #"\n"
0 0 17 3 18 #"(long-menor-a-5 s)"
0 0 17 29 1 #"\n"
0 0 17 3 54 #"en una primer instancia esto lo podemos definir con if"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"(if (< (string-length s) 5) #t #f)"
0 0 17 29 1 #"\n"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 91
(
 #"pero como esencialmente devolvemos #t si la condicion es true y #f s"
 #"i la condicion es false"
) 0 0 17 29 1 #"\n"
0 0 17 3 76
(
 #"la funcion entera directamente puede ser la condicion es decir que n"
 #"os queda"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"(define"
0 0 17 29 1 #"\n"
0 0 17 3 18 #"(long-menor-a-5 s)"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"(< (string-length s) 5)"
0 0 17 29 1 #"\n"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 61
#"Cabe aclarar que esto despues lo van a poder hacer con filter"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"(define"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"(corta)"
0 0 17 29 1 #"\n"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"Corta como dijimos toma una lista, llamemosla l"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"(define"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"(corta l)"
0 0 17 29 1 #"\n"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; corta? : String -> Bool"
0 0 24 29 1 #"\n"
0 0 17 3 103
(
 #"; dado un string me va a devolver #true si este tiene longitud menor"
 #" a 5 y el string consta de una sola"
) 0 0 24 29 1 #"\n"
0 0 17 3 36 #"; palabra y #false en caso contrario"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"pal-corta?"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"palabra"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"pal-corta?"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"hey"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"pal-corta?"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"pal-corta?"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 2 #"a\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"pal-corta?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 6 #"false?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"member?"
0 0 24 3 1 #" "
0 0 21 3 7 #"#\\space"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; aclarar que los que tengan mas de una palabra no va"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; cortas: List(String) -> List(String)"
0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #"; dada una lista de strings devuelve una lista con aquellas palabras"
 #" con longitud menor a 5"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cortas"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cortas"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"holas"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"queeee"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"tallll"
0 0 19 3 1 #"\""
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cortas"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"hola"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"antiparras"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"comunismo"
0 0 19 3 1 #"\""
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"hola"
0 0 19 3 1 #"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cortas"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"hola"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"que"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"tal"
0 0 19 3 1 #"\""
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"hola"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"que"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"tal"
0 0 19 3 1 #"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cortas"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #") "
0 0 19 3 1 #"\""
0 0 19 3 4 #"Tipo"
0 0 19 3 1 #" "
0 0 19 3 2 #"de"
0 0 19 3 1 #" "
0 0 19 3 4 #"dato"
0 0 19 3 1 #" "
0 0 19 3 9 #"ingresado"
0 0 19 3 10 #" inv\303\241lido"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cortas"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"oh"
0 0 19 3 2 #" f"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"rayo"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"australia"
0 0 19 3 1 #"\""
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"rayo"
0 0 19 3 1 #"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"cortas"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 10 #"pal-corta?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cortas"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 6 #"cortas"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"Tipo"
0 0 19 3 1 #" "
0 0 19 3 2 #"de"
0 0 19 3 1 #" "
0 0 19 3 4 #"dato"
0 0 19 3 1 #" "
0 0 19 3 9 #"ingresado"
0 0 19 3 1 #" "
0 0 19 3 10 #"inv\303\241lido\""
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; aclarar lo de filter "
0           0
